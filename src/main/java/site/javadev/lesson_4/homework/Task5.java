package site.javadev.lesson_4.homework;
/**Вывести на экран таблицу умножения 10х10 используя цикл while.
 Числа разделить пробелом.


 Пример вывода на экран:
 1 2 3 4 5 6 7 8 9 10
 2 4 6 8 10 12 14 16 18 20
 3 6 9 12 15 18 21 24 27 30
 4 8 12 16 20 24 28 32 36 40
 5 10 15 20 25 30 35 40 45 50
 6 12 18 24 30 36 42 48 54 60
 7 14 21 28 35 42 49 56 63 70
 8 16 24 32 40 48 56 64 72 80
 9 18 27 36 45 54 63 72 81 90
 10 20 30 40 50 60 70 80 90 100*/
public class Task5 {
    public static void main (String[] args) {
        int i = 1;
        int j = 1;

        while (i <= 10) {

            while (j <= 10) {

                System.out.print(i*j);
                System.out.print(" ");
                j++;
            }
            i++;
            j=1;
            System.out.print("\n");

        }

    }
}

/* ### Логика создания таблицы умножения с известными множителями (10 и 10) с использованием `while`

 1. **Инициализация переменных**:
 - Инициализируем две переменные: `i` и `j`, которые будут представлять множители.
 - Начальное значение для обеих переменных устанавливается в `1`, потому что таблица умножения начинается с 1.

 2. **Внешний цикл `while` для первого множителя**:
 - Первый цикл `while` контролирует строки таблицы умножения (первый множитель, `i`).
 - Цикл продолжается до тех пор, пока `i` меньше или равно 10 (в данном случае 10 — это верхняя граница, которая
 известна заранее).

 3. **Внутренний цикл `while` для второго множителя**:
 - Внутренний цикл `while` контролирует столбцы таблицы умножения (второй множитель, `j`).
 - Он также продолжается до тех пор, пока `j` меньше или равно 10.

 4. **Выполнение операции умножения**:
 - Внутри внутреннего цикла выполняется операция умножения: `i * j`.
 - Результат умножения можно сразу вывести на экран в виде строки, например, `"i * j = результат"`.

 5. **Обновление переменных**:
 - После выполнения операции умножения и вывода результата переменная `j` увеличивается на 1 (`j++`).
 - Когда внутренний цикл достигает `j = 11` (то есть, когда `j` становится больше 10), внутренний цикл завершается.

 6. **Переход к следующему множителю**:
 - После завершения внутреннего цикла внешняя переменная `i` увеличивается на 1 (`i++`).
 - Затем переменная `j` снова устанавливается в 1, чтобы начать новый ряд умножений для следующего значения `i`.

 7. **Проверка завершения внешнего цикла**:
 - Внешний цикл также завершается, когда `i` становится больше 10.

 ### Основные шаги в программе:

 - **Инициализация `i` и `j`**: Задаем оба множителя, начиная с 1.
 - **Внешний цикл `while` (по `i`)**: Продолжается пока `i <= 10`.
 - **Внутренний цикл `while` (по `j`)**: Продолжается пока `j <= 10`.
 - Выполняем умножение `i * j`.
 - Выводим результат.
 - Увеличиваем `j` на 1.
 - После завершения внутреннего цикла увеличиваем `i` на 1 и сбрасываем `j` в 1.
 - **Повторяем до тех пор, пока `i` не станет больше 10**.

 Таким образом, даже зная заранее множители (10 и 10), программа, используя `while`, по-прежнему должна четко управлять
 логикой завершения циклов и обновлением переменных-счетчиков.*/
