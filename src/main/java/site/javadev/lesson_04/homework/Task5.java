package site.javadev.lesson_04.homework;
/**5 Вывести на экран таблицу умножения 10х10 используя цикл while.
 Числа разделить пробелом.


 Пример вывода на экран:
 1 2 3 4 5 6 7 8 9 10
 2 4 6 8 10 12 14 16 18 20
 3 6 9 12 15 18 21 24 27 30
 4 8 12 16 20 24 28 32 36 40
 5 10 15 20 25 30 35 40 45 50
 6 12 18 24 30 36 42 48 54 60
 7 14 21 28 35 42 49 56 63 70
 8 16 24 32 40 48 56 64 72 80
 9 18 27 36 45 54 63 72 81 90
 10 20 30 40 50 60 70 80 90 100*/
public class Task5 {
    public static void main (String[] args) {
        int i = 1;
        int j = 1;

        while (i <= 10) {

            while (j <= 10) {

                System.out.print((i*j++) + " ");
            }
            i++;
            j=1;
            System.out.print("\n");

        }

    }
}

/* Логика создания таблицы умножения 10x10 с использованием while

    Инициализация переменных:
        Инициализируются две переменные: i и j, которые будут представлять множители.
        Обе переменные инициализируются значением 1, так как таблица умножения начинается с 1.

    Внешний цикл while для первого множителя:
        Внешний цикл while управляет строками таблицы умножения, где i представляет текущий первый множитель.
        Цикл продолжается до тех пор, пока i меньше или равно 10, что соответствует диапазону значений первого
         множителя.

    Внутренний цикл while для второго множителя:
        Внутренний цикл while управляет столбцами таблицы умножения, где j представляет текущий второй множитель.
        Цикл продолжается до тех пор, пока j меньше или равно 10.

    Выполнение операции умножения и вывод результата:
        Внутри внутреннего цикла выполняется операция умножения i * j.
        Результат умножения немедленно выводится на экран с использованием System.out.print((i * j++) + " ");.
        После вывода результата переменная j увеличивается на 1 (постфиксный инкремент j++), чтобы перейти к следующему
         значению второго множителя.

    Завершение внутреннего цикла:
        Когда значение j достигает 11 (т.е., превышает 10), внутренний цикл завершается.

    Переход к следующему значению первого множителя:
        После завершения внутреннего цикла значение переменной i увеличивается на 1 (i++), чтобы перейти к следующему
        значению первого множителя.
        Переменная j сбрасывается в 1 для начала нового ряда умножений со следующего значения i.

    Вывод новой строки для следующей строки таблицы умножения:
        System.out.print("\n"); используется для перехода на новую строку после завершения одного ряда умножений.

    Завершение внешнего цикла:
        Внешний цикл также завершается, когда i становится больше 10.

Основные шаги в программе:

    Инициализация i и j: Устанавливаем i = 1 и j = 1.
    Внешний цикл while (по i): Продолжается, пока i <= 10.
    Внутренний цикл while (по j): Продолжается, пока j <= 10.
    Выполняем умножение i * j.
    Выводим результат с пробелом.
    Увеличиваем j на 1.
    После завершения внутреннего цикла увеличиваем i на 1 и сбрасываем j в 1.
    Переходим на новую строку.
    Повторяем до тех пор, пока i не станет больше 10.

Таким образом, предложенный код логически соответствует приведенной логике, он эффективно выводит таблицу
умножения 10x10 с использованием вложенных циклов while и управлением переменными-счетчиками для выполнения
необходимых операций умножения и форматирования вывода.*/
